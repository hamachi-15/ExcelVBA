Attribute VB_Name = "Module3"
Option Explicit

' ソースコードの先頭に記入するコメント等
Public Const CommentPrefixStart = "/*!"
Public Const CommentPrefixFile = vbTab & "@file" & vbTab
Public Const CommentPrefixEnum = vbTab & "@enum" & vbTab
Public Const CommentPrefixStruct = vbTab & "@struct" & vbTab
Public Const CommentPrefixBrief = vbTab & "@brief" & vbTab
Public Const CommentPrefixAutor = vbTab & "@autor" & vbTab
Public Const CommentPrefixData = vbTab & "@data" & vbTab
Public Const CommentPrefixEnd = "**/"

Public Const AutoGeneratedBrief = "ツールにて自動生成しています。絶対に書き換えないでください。"
Public Const IncludeGurard = "#pragma" & vbTab & "once"

'API定義
Public Declare Sub CopyMemory Lib "kernel32" Alias "RtlMoveMemory" (Destination As Any, Source As Any, ByVal Length As Long)

' 検索開始セル名
Public Const IndexStartName = "A3"

' 引数：TargetArray -> 添え字を確認したい配列
' 引数：element -> 要素(文字列等)
' 戻り値：インデックス番号
Public Function IndexOf(TargetArray, element)
    Dim i As Integer
    For i = 0 To UBound(TargetArray)
        If TargetArray(i) = element Then Exit For
    Next
    IndexOf = i
End Function

' 引数：TargetArray -> 添え字を確認したい配列
' 引数：element -> 要素(文字列等)
' 戻り値：インデックス番号
Public Function LongToBytes(ByRef valueArray() As Byte, ByRef value As Long)

    Call CopyMemory(valueArray(LBound(valueArray)), value, 4)

End Function

' 引数：TargetArray -> 添え字を確認したい配列
' 引数：element -> 要素(文字列等)
' 戻り値：インデックス番号
Public Function SingleToBytes(ByRef valueArray() As Byte, ByRef value As Single)

    Call CopyMemory(valueArray(LBound(valueArray)), value, 4)

End Function

' 引数：sheetName -> シート名
' 引数：element -> 要素名
' 戻り値：指定した名前のシートが存在するか
Public Function ExistsWorksheet(ByVal name As String)

    Dim ws As Worksheet
    For Each ws In Sheets
        If ws.name = name Then
            ' 存在する
            ExistsWorksheet = True
            Exit Function
        End If
    Next
    
    ' 存在しない
    ExistsWorksheet = False
End Function

' 引数：sheetName -> シート名
' 引数：element -> 要素名
' 戻り値：インデックス番号
Public Function SearchSheetElementId(sheetName As String, element As String)
    Dim normalizedRowCounter As Integer
    Dim normalizedCollumnCounter As Integer
    Dim maxRowCount As Integer
    
    Dim workText As String
    Dim Worksheet As Worksheet
    
    ' シート取得
    Set Worksheet = Sheets(sheetName)

    ' 指定のセル名からデータ定義
    normalizedRowCounter = Worksheet.Range(IndexStartName).Row
    normalizedCollumnCounter = Worksheet.Range(IndexStartName).Column

    ' Id数を取得する
    maxRowCount = 1
    workText = Worksheet.Cells(normalizedRowCounter + maxRowCount + 1, normalizedCollumnCounter + 1).value
    While workText <> ""
        ' 次の文字を調べる
        maxRowCount = maxRowCount + 1
        workText = Worksheet.Cells(normalizedRowCounter + maxRowCount + 1, normalizedCollumnCounter + 1).value
    Wend

    SearchSheetElementId = 0
    workText = Worksheet.Cells(normalizedRowCounter + SearchSheetElementId + 1, normalizedCollumnCounter).value
    While workText <> element

        SearchSheetElementId = SearchSheetElementId + 1
        workText = Worksheet.Cells(normalizedRowCounter + SearchSheetElementId, normalizedCollumnCounter + 2).value
    Wend

    workText = Worksheet.Cells(normalizedRowCounter + SearchSheetElementId, normalizedCollumnCounter + 1).value
    maxRowCount = Val(workText)
    SearchSheetElementId = maxRowCount

End Function

' 引数：TypeText -> 型文字列
' 引数：Element -> 要素文字列
' 引数：dataTextByteArray -> バイト文字列
' 引数：DefinisionDataMap -> データマップ
' 戻り値：インデックス番号
Public Function ConvertValue(TypeText As String, element As String, ByRef dataTextByteArray As Variant, ByRef DefinisionDataMap As Dictionary)
    Dim workInt As Long
    Dim workFloat As Single
    Dim byteIntArray(3) As Byte
    Dim byteFloatArray(3) As Byte
    Dim byteBooleanArray(3) As Byte
    Dim byteStringArray() As Byte
    If TypeText = "int" Then
        ' int型
        workInt = Val(element)
        Call LongToBytes(byteIntArray, workInt)
        ConvertValue = byteIntArray
    ElseIf TypeText = "float" Then
        ' float型
        workFloat = Val(element)
        Call SingleToBytes(byteFloatArray, workFloat)
        ConvertValue = byteFloatArray
    ElseIf TypeText = "bool" Then
        ' bool型
        If element = "True" Then
            Call LongToBytes(byteBooleanArray, 1)
        Else
            Call LongToBytes(byteBooleanArray, 0)
        End If
        ConvertValue = byteBooleanArray
    Else
        ' enum定数をしているする
        ' DefinisionDataMap
        If DefinisionDataMap.Exists(TypeText) = True Then
            If element = "" Then
                workInt = 0 ' 空なら0を入れる
            Else
                workInt = IndexOf(DefinisionDataMap.Item(TypeText), element)
            End If
            ' インデックスを入れる
            Call LongToBytes(byteIntArray, workInt)
            ConvertValue = byteIntArray
        Else
            ' 型がデータシートとして存在しているかチェック
            If ExistsWorksheet(TypeText) = True Then
                ' 型からシートを検索してIdを取得する
                workInt = SearchSheetElementId(TypeText, element)

                ' インデックスを入れる
                Call LongToBytes(byteIntArray, workInt)
                ConvertValue = byteIntArray
            Else
                ' string型を変換
                byteStringArray = StrConv(element, vbFromUnicode)
    
                ' 現在の終端位置をIdとする
                Dim workIndex As Long
                workIndex = UBound(dataTextByteArray) + 1
                Call LongToBytes(byteIntArray, workIndex)
                ConvertValue = byteIntArray
                
                ' 文字列配列を保存する
                ReDim Preserve dataTextByteArray(workIndex + UBound(byteStringArray) + 1)
                For workInt = 0 To UBound(byteStringArray)
                    dataTextByteArray(workIndex + workInt) = byteStringArray(workInt)
                Next workInt
                
                ' 終端文字を追加
                dataTextByteArray(UBound(dataTextByteArray)) = 0
            End If
        End If
    End If
End Function

