VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "Sheet4"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Option Explicit

' 出力処理
Sub Export_Click()
    Dim ExportDirectoryName As String
    Dim ExportDataPath As String
    Dim ExportCodePath As String

    Dim sheetName As String
    Dim SheetCounter As Integer

    ' 出力先を取得
    ExportDirectoryName = Sheets("Master").Range("C5")
    ExportDataPath = Sheets("Master").Range("C6")
    ExportCodePath = Sheets("Master").Range("C7")

    ' フォルダを生成する
    ExportDataPath = ExportDirectoryName + "/" + ExportDataPath
    ExportCodePath = ExportDirectoryName + "/" + ExportCodePath
    If Dir(ExportDataPath, vbDirectory) = "" Then
        MkDir ExportDataPath
    End If
    If Dir(ExportCodePath, vbDirectory) = "" Then
        MkDir ExportCodePath
    End If

    ' ==================================================
    ' 定義ファイル
    ' ==================================================
    ' 定義ヘッダー出力
    Call ExportDefinitionSheet(ExportCodePath)

    ' 変換用定義データマップを構築
    Dim DefinisionDataMap As Dictionary
    Set DefinisionDataMap = ConstructionDefinisionDataMap()

    ' データシートの格納
    Dim SheetArray As Variant
    SheetArray = Array()
    SheetCounter = 1
    For SheetCounter = 1 To Sheets.Count Step 1
        sheetName = Sheets(SheetCounter).name
        ' 除外シート
        If sheetName = "Master" Then
            ' 除外
        ElseIf sheetName = "Definition" Then
            ' 除外
        Else
            ' データシート格納
            ReDim Preserve SheetArray(UBound(SheetArray) + 1)
            SheetArray(UBound(SheetArray)) = sheetName
        End If

    Next SheetCounter

    ' データの出力
    For SheetCounter = 0 To UBound(SheetArray) Step 1
        Dim fso As New FileSystemObject
        Dim codeFile As TextStream
        Dim Worksheet As Worksheet
        Dim WorkCounter As Integer

        Dim rowCounter As Integer
        Dim collumnCounter As Integer
        Dim normalizedRowCounter As Integer
        Dim normalizedCollumnCounter As Integer

        ' シート単位でデータ出力
        'ExportSheetDataBinary(SheetName, ExportDataPath)

        ' 定数名取得
        sheetName = SheetArray(SheetCounter)

        ' シート取得
        Set Worksheet = Sheets(sheetName)

        ' 指定のセル名からデータ定義
        normalizedRowCounter = Worksheet.Range(IndexStartName).Row
        normalizedCollumnCounter = Worksheet.Range(IndexStartName).Column

        ' ==================================================
        ' ヘッダーファイル生成
        ' ==================================================
        Set codeFile = fso.CreateTextFile(ExportCodePath & "/" & sheetName & ".h", overwrite:=True, Unicode:=False)

        Dim workText As String
        Dim workTextArr() As String
        Dim workTypeArray As Variant
        Dim workTypeVariantArray As Variant
        Dim workTypeCommentArray As Variant
        Dim maxRowCount As Integer
        Dim dataArray As Variant
        Dim dataTextByteArray As Variant
        Dim dataPeaceArray As Variant

        ' 先頭文字列書き込み
        codeFile.WriteLine (CommentPrefixStart)
        codeFile.WriteLine (CommentPrefixFile & sheetName & ".h")
        codeFile.WriteLine (CommentPrefixBrief & AutoGeneratedBrief)
        codeFile.WriteLine (CommentPrefixAutor & ThisWorkbook.name)
        codeFile.WriteLine (CommentPrefixData & Date)
        codeFile.WriteLine (CommentPrefixEnd)
        codeFile.WriteLine (IncludeGurard & vbCrLf)

        ' 配列生成
        workTypeArray = Array()
        workTypeVariantArray = Array()
        workTypeCommentArray = Array()
        dataArray = Array()
        dataTextByteArray = Array()

        ' Id数を取得する
        maxRowCount = 1
        workText = Worksheet.Cells(normalizedRowCounter + maxRowCount + 1, normalizedCollumnCounter + 1).value
        While workText <> ""
            ' 次の文字を調べる
            maxRowCount = maxRowCount + 1
            workText = Worksheet.Cells(normalizedRowCounter + maxRowCount + 1, normalizedCollumnCounter + 1).value
        Wend

        ' 構造体を構築するデータを収集、及びデータ配列を生成する
        collumnCounter = normalizedCollumnCounter + 1
        workText = Worksheet.Cells(normalizedRowCounter, collumnCounter).value
        While workText <> ""

            ' 型・名前格納
            workTextArr = Split(workText, "\") ' 区切りの文字設定
            ReDim Preserve workTypeArray(UBound(workTypeArray) + 1)
            ReDim Preserve workTypeVariantArray(UBound(workTypeVariantArray) + 1)

            ' 型を書き込む時に指定の文字を書き換える
            If workTextArr(0) = "string" Then
                ' char型に変換する
                workTypeArray(UBound(workTypeArray)) = "char*"
            Else
                ' そのまま納入
                workTypeArray(UBound(workTypeArray)) = workTextArr(0)
            End If
            workTypeVariantArray(UBound(workTypeArray)) = workTextArr(1)

            ' コメント格納
            workText = Worksheet.Cells(normalizedRowCounter - 1, collumnCounter).value


            ReDim Preserve workTypeCommentArray(UBound(workTypeCommentArray) + 1)
            workTypeCommentArray(UBound(workTypeArray)) = workText

            ' データ格納
            ReDim Preserve dataArray(collumnCounter - normalizedCollumnCounter - 1)
            dataPeaceArray = Array()
            rowCounter = normalizedRowCounter + 1
            workText = Worksheet.Cells(rowCounter, collumnCounter).value
            While rowCounter - normalizedRowCounter - 1 < maxRowCount
                ' 文字列をバイト配列に変換
                ReDim Preserve dataPeaceArray(rowCounter - normalizedRowCounter - 1)
                dataPeaceArray(rowCounter - normalizedRowCounter - 1) = ConvertValue(workTextArr(0), workText, dataTextByteArray, DefinisionDataMap)

                rowCounter = rowCounter + 1
                workText = Worksheet.Cells(rowCounter, collumnCounter).value
            Wend
            ' データ配列に格納
            dataArray(collumnCounter - normalizedCollumnCounter - 1) = dataPeaceArray

            collumnCounter = collumnCounter + 1
            workText = Worksheet.Cells(normalizedRowCounter, collumnCounter).value
        Wend

        ' 必要なインクルードファイルを書き込んでいく
        For WorkCounter = 0 To UBound(workTypeArray) Step 1
            workText = workTypeArray(WorkCounter)
            ' データ
            If DefinisionDataMap.Exists(workText) Then
                ' 書き込み
                codeFile.WriteLine ("#include" & vbTab & """" & workText & ".h""")
            End If
            ' データ
            Dim workIndex As Integer
            If (UBound(SheetArray) + 1 > IndexOf(SheetArray, workText)) Then
                ' 書き込み
                codeFile.WriteLine ("#include" & vbTab & """" & workText & ".h""")
            End If

            If workText = "DirectX::XMFLOAT3" Then
                codeFile.WriteLine ("#include" & vbTab & """" & "DirectXMath" & ".h""")
            End If
        Next WorkCounter



        ' 構造体宣言
        codeFile.WriteLine (vbCrLf)
        codeFile.WriteLine (CommentPrefixStart)
        codeFile.WriteLine (CommentPrefixStruct & sheetName)
        codeFile.WriteLine (CommentPrefixBrief & "データ構造体")
        codeFile.WriteLine (CommentPrefixEnd)
        codeFile.WriteLine ("struct" & vbTab & sheetName & vbCrLf & "{")

        ' メンバ変数を書き込んでいく
        For WorkCounter = 0 To UBound(workTypeArray) Step 1
            workText = workTypeArray(WorkCounter)
            ' 書き込み
            If (UBound(SheetArray) + 1 > IndexOf(SheetArray, workText)) Then
                ' データシート名の物はバイナリデータの読み込み時に指定する
                codeFile.WriteLine (vbTab & workText & "*" & vbTab & workTypeVariantArray(WorkCounter) & ";" & vbTab & "//!<" & vbTab & workTypeCommentArray(WorkCounter))
            Else
                codeFile.WriteLine (vbTab & workText & vbTab & workTypeVariantArray(WorkCounter) & ";" & vbTab & "//!<" & vbTab & workTypeCommentArray(WorkCounter))
            End If
        Next WorkCounter
        ' 構造体宣言完了
        codeFile.WriteLine ("};")

        ' Containerクラスヘッダー生成処理

        codeFile.Close

        ' ==================================================
        ' ソースファイル生成
        ' ==================================================
        ' バイナリデータ読み込み用の構造体の宣言は行うこと

        ' ==================================================
        ' データファイル生成
        ' ==================================================
        Open ExportDataPath & "/" & sheetName & ".dat" For Binary As #1
        Dim workByte As Byte
        Dim byteIntArray(3) As Byte

        ' ヘッダーデータ数を書き込む
        Call LongToBytes(byteIntArray, Val(maxRowCount))    ' データ数
        For collumnCounter = 0 To UBound(byteIntArray)
            workByte = byteIntArray(collumnCounter)
            Put #1, , workByte
        Next collumnCounter
        Call LongToBytes(byteIntArray, Val(UBound(dataTextByteArray) + 1))  ' 文字の長さを書き込む
        For collumnCounter = 0 To UBound(byteIntArray)
            workByte = byteIntArray(collumnCounter)
            Put #1, , workByte
        Next collumnCounter

        ' 文字列を書き込む
        For collumnCounter = 0 To UBound(dataTextByteArray)
            workByte = dataTextByteArray(collumnCounter)
            Put #1, , workByte
        Next collumnCounter

        ' データを書き込む
        For rowCounter = 0 To maxRowCount - 1
            For collumnCounter = 0 To UBound(dataArray)
                Dim workInt As Integer
                workInt = UBound(dataArray(collumnCounter)(rowCounter))
                For WorkCounter = 0 To workInt
                    workByte = dataArray(collumnCounter)(rowCounter)(WorkCounter)
                    Put #1, , workByte
                Next WorkCounter
            Next collumnCounter
        Next rowCounter
        Close #1

    Next SheetCounter

End Sub


